db insertion --> 

	pom.xml 
	1 -> add mysql connector 
	2 -> add spring data jdbc 
	
	
	connection
	preparedstmt 
	
	
create database spring25m; 

use spring25m; 

create table users(
	userId int primary key auto_increment,
	firstName varchar(30),
	lastName varchar(30),
	email varchar(30),
	password varchar(30),
	gender varchar(6),
	city varchar(30)
);


password encryption => 
	algo ->
			bcrypt
			
			 Signup.jsp -> password input -> submit -> Controller ->
			 		controller -> 
			 				read 
			 				validate
			 				encrypt password 
			 				db insert 
			 		
password encryption steps :- 
		
		step 1: bcrypt 
				spring crypto 
				
				<!-- https://mvnrepository.com/artifact/org.springframework.security/spring-security-crypto -->
					<dependency>
					    <groupId>org.springframework.security</groupId>
					    <artifactId>spring-security-crypto</artifactId>
					    <version>6.5.2</version>
					</dependency>  
				pom.xml 
		
			 		
	step 2: 			 
			 Controller -> 
						object 
						encode() 
		BCryptPasswordEncoder passwordEncoder  = new BCryptPasswordEncoder();
		String ePwd = passwordEncoder.encode(userBean.getPassword());
		userBean.setPassword(ePwd);
		
		 alter table user modify password varchar(128);

***>		 
now lets eject password encoder with singleton 

	for that we have to initialize using @Bean
	 
		@Bean // class -> spring -> memory -> singleton
			PasswordEncoder getEncoder() {
				return new BCryptPasswordEncoder();
			}

now you can ask object using @Autowired in controller 
	@Autowired 
	PasswordEncoder  passwordEncoder;

------------------------------------------------------------------------------------------						 
			 
	how to login / authenticate user 
			with password encryption 
			
	Login.jsp	
			email 
			password 
			
			submit -> controller ->
			
	SessionController
			read 
							
------------------------------------------------------------------------------------------						 

step1: 
spring starter -> 
java mail dep -> pom.xml 


step2:
	configure mail server in appliction.properties
	
# Gmail SMTP
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=tejasshah2k19@gmail.com
spring.mail.password=jzmnxwlxofshjmbs

spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
spring.mail.properties.mail.smtp.starttls.required=true
spring.mail.properties.mail.smtp.connectiontimeout=10000
spring.mail.properties.mail.smtp.timeout=10000
spring.mail.properties.mail.smtp.writetimeout=10000
	
	
step3:
service class ->
	service -> MailerService
		





















			
			 
			 
			 
			 
			 
			 
			 